; (function () {
  $(".slider__about-menu").mouseover(e => {
    const $this = $(e.currentTarget);
    const dropdown = $this.find(".slider__dropdown");

    $this.addClass("slider__about-menu--active");
    dropdown.addClass("dropdown--active");
  });

  $(".slider__about-menu").mouseout(e => {
    const $this = $(e.currentTarget);
    const dropdown = $this.find(".slider__dropdown");

    $this.removeClass("slider__about-menu--active");
    dropdown.removeClass("dropdown--active");
  });
})();; (function () {
  const sliderList = document.querySelector(".slider__list");
  const leftArrow = document.querySelector("#left");
  const rightArrow = document.querySelector("#right");

  const loop = (direction, e) => {
    e.preventDefault();

    if (direction === "right") {
      sliderList.appendChild(sliderList.firstElementChild);
    } else {
      sliderList.insertBefore(sliderList.lastElementChild, sliderList.firstElementChild);
    }
  }

  leftArrow.addEventListener("click", function (e) {
    loop("left", e);
  });

  rightArrow.addEventListener("click", function (e) {
    loop("right", e);
  });
})();; (function () {
  let myMap;
  const init = () => {
    myMap = new ymaps.Map("map", {
      center: [55.752761, 37.593950],
      zoom: 14,
      controls: [],
    });

    let coords = [
      [55.758657, 37.582835],
      [55.743057, 37.581770],
      [55.750232, 37.603689],
      [55.754585, 37.625343],
    ],
      myCollection = new ymaps.GeoObjectCollection({}, {
        draggable: false,
        iconLayout: 'default#image',
        iconImageHref: './img/icons/marker.svg',
        iconImageSize: [46, 57],
        iconImageOffset: [-35, -52]
      });

    for (let i = 0; i < coords.length; i++) {
      myCollection.add(new ymaps.Placemark(coords[i]));
    }

    myMap.geoObjects.add(myCollection);

    myMap.behaviors.disable('scrollZoom');
  };

  ymaps.ready(init);
})();; (function () {
  const blockWidth = item => {
    let itemWidth = 0;
    const screenWidth = $(window).width();
    const container = item.closest(".products-menu");
    const titlesBlocks = container.find(".products-menu__title");
    const titlesWidth = titlesBlocks.width() * titlesBlocks.length;

    const textContainer = item.find(".products-menu__container");
    const paddingLeft = parseInt(textContainer.css("padding-left"));
    const paddingRight = parseInt(textContainer.css("padding-right"));

    const isMobile = window.matchMedia("(max-width: 768px)").matches;

    if (isMobile) {
      itemWidth = screenWidth - titlesWidth;
    } else {
      itemWidth = 500;
    }

    return {
      container: itemWidth,
      textContainer: itemWidth - paddingRight - paddingLeft
    }
  }

  const closeAllMenuItem = container => {
    const items = container.find(".products-menu__item");
    const content = container.find(".products-menu__content");

    items.removeClass("active");
    content.width(0);
  }

  const openProductMenuItem = item => {
    const hiddenContent = item.find(".products-menu__content");
    const w = blockWidth(item);
    const textBlock = item.find(".products-menu__container");

    item.addClass("active");
    hiddenContent.width(w.container);
    textBlock.width(w.textContainer);
  }

  $(".products-menu__title").click(e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const item = $this.closest(".products-menu__item");
    const itemOpened = item.hasClass("active");
    const container = $this.closest(".products-menu");

    if (itemOpened) {
      closeAllMenuItem(container);
    } else {
      closeAllMenuItem(container);
      openProductMenuItem(item);
    }
  });
})();; (function () {
  const validateField = (form, fieldsArray) => {
    fieldsArray.forEach(field => {
      field.removeClass("input-error");
      if (field.val().trim() === "") {
        field.addClass("input-error");
      }
    });

    const errorFields = form.find(".input-error");
    return errorFields.length === 0;
  }

  $(".form").submit(e => {
    e.preventDefault();

    const form = $(e.currentTarget);
    const name = form.find("[name='name']");
    const phone = form.find("[name='phone']");
    const comment = form.find("[name='comment']");
    const to = form.find("[name='to']");

    const modal = $("#modal");
    const content = modal.find(".modal__content");
    content.removeClass("error-modal");

    const isValid = validateField(form, [name, phone, comment, to]);

    if (isValid) {
      const request = $.ajax({
        url: "https://webdev-api.loftschool.com/sendmail",
        method: "post",
        data: {
          name: name.val(),
          phone: phone.val(),
          comment: comment.val(),
          to: to.val()
        }
      });

      request.done((data) => {
        content.text(data.message);
      });

      request.fail((data) => {
        const message = data.responseJSON.message;
        content.text(message);
        content.addClass("error-modal");
      });

      request.always(() => {
        $.fancybox.open({
          src: "#modal",
          type: "inline"
        });
      })
    }

  });

  $(".app-submit-modal").click(e => {
    e.preventDefault();

    $.fancybox.close();
  });
})();; (function () {
  const sections = $("section");
  const display = $(".maincontent");
  const sideMenu = $(".fixed-menu");
  const menuItems = sideMenu.find(".fixed-menu__item");

  const mobileDetect = new MobileDetect(window.navigator.userAgent);
  const isMobile = mobileDetect.mobile();

  let inScroll = false;

  sections.first().addClass("active");

  const countSectionPosition = sectionEq => {
    const position = sectionEq * -100;

    if (isNaN(position)) {
      console.error("Передано не верное значение в countSectionPosition");
      return 0;
    }
    return position;
  }

  const changeMenuThemeForSection = sectionEq => {
    const currentSection = sections.eq(sectionEq);
    const menuTheme = currentSection.attr("data-sidemenu-theme");
    const activeClass = "fixed-menu--black";

    if (menuTheme === "black") {
      sideMenu.addClass(activeClass);
    } else {
      sideMenu.removeClass(activeClass);
    }
  }

  const resetActiveClassForItem = (items, itemEq, activeClass) => {
    items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
  }

  const performTransition = sectionEq => {
    if (inScroll) return;
    inScroll = true;

    const transitionOver = 1000;
    const mouseInertiaOver = 300;

    const position = countSectionPosition(sectionEq);

    changeMenuThemeForSection(sectionEq);

    display.css({
      transform: `translateY(${position}%)`
    });

    resetActiveClassForItem(sections, sectionEq, "active");
    resetActiveClassForItem(menuItems, sectionEq, "fixed-menu__item--active");

    setTimeout(() => {
      inScroll = false;
    }, transitionOver + mouseInertiaOver);
  }

  const viewportScroller = () => {
    const activeSection = sections.filter(".active");
    const nextSection = activeSection.next();
    const prevSection = activeSection.prev();

    return {
      next() {
        if (nextSection.length) {
          performTransition(nextSection.index())
        }
      },
      prev() {
        if (prevSection.length) {
          performTransition(prevSection.index())
        }
      }
    }
  }

  $(window).on("wheel", e => {
    const deltaY = e.originalEvent.deltaY;
    const scroller = viewportScroller();

    if (deltaY > 0) {
      scroller.next();
    } else if (deltaY < 0) {
      scroller.prev();
    }
  })

  $(window).on("keydown", e => {
    const tagName = e.target.tagName.toLowerCase();
    const userTypingInInputs = tagName === "input" || tagName === "textarea";
    const scroller = viewportScroller();

    if (userTypingInInputs) return;
    switch (e.keyCode) {
      case 38:
        scroller.prev();
        break;

      case 40:
        scroller.next();
        break;
    }
  })

  $(".wrapper").on("touchmove", e => e.preventDefault());

  $("[data-scroll-to]").click(e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const target = $this.attr("data-scroll-to");
    const reqSection = $(`[data-section-id=${target}]`);

    performTransition(reqSection.index());
  })

  if (isMobile) {
    //  https://github.com/mattbryson/TouchSwipe-Jquery-Plugin
    $("body").swipe({
      swipe: function (event, direction) {
        const scroller = viewportScroller();
        let scrollDirection = "";

        if (direction === "up") scrollDirection = "next";
        if (direction === "down") scrollDirection = "prev";

        if (scrollDirection !== "") scroller[scrollDirection]();
      }
    })
  }
})()
;; (function () {
  const hamburger = document.querySelector(".hamburger");
  const overlay = document.querySelector(".overlay");
  const body = document.querySelector("body");
  const fixedMenu = document.querySelector(".fixed-menu");
  const links = $(".overlay-menu__link");

  hamburger.addEventListener("click", e => {
    e.preventDefault();

    hamburger.classList.toggle("hamburger--active");
    overlay.classList.toggle("overlay--active");
    body.classList.toggle("body--active");
    fixedMenu.classList.toggle("fixed-menu--hidden");
  });

  $(links).each((link) => {
    links.click(e => {
      $(".overlay").removeClass("overlay--active");
      $(body).removeClass("body--active");
      $(".hamburger").removeClass("hamburger--active");
      $(".fixed-menu").removeClass("fixed-menu--hidden");
    });
  });
})();/* ; (function () { */
let player;

const playerContainer = $(".player");

let eventsInit = () => {
  $(".player__start").click(e => {
    e.preventDefault();

    if (playerContainer.hasClass("paused")) {
      player.pauseVideo();
    } else {
      player.playVideo();
    }
  });

  $(".player__playback").click(e => {
    const bar = $(e.currentTarget);
    const clickedPosition = e.originalEvent.layerX;
    const newButtonPositionPercent = (clickedPosition / bar.width()) * 100;
    const newPlaybackPositionSec =
      (player.getDuration() / 100) * newButtonPositionPercent;

    $(".player__playback-button").css({
      left: `${newButtonPositionPercent}%`
    });

    player.seekTo(newPlaybackPositionSec);
  });

  $(".player__splash").click(e => {
    player.playVideo();
  })
};

const formatTime = timeSec => {
  const roundTime = Math.round(timeSec);

  const minutes = addZero(Math.floor(roundTime / 60));
  const seconds = addZero(roundTime - minutes * 60);

  function addZero(num) {
    return num < 10 ? `0${num}` : num;
  }

  return `${minutes} : ${seconds}`;
};

const onPlayerReady = () => {
  let interval;
  const durationSec = player.getDuration();

  $(".player__duration-estimate").text(formatTime(durationSec));

  if (typeof interval !== "undefined") {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercent = (completedSec / durationSec) * 100;

    $(".player__playback-button").css({
      left: `${completedPercent}%`
    });

    $(".player__duration-completed").text(formatTime(completedSec));
  }, 1000);
};

const onPlayerStateChange = event => {
  /*
    -1 (воспроизведение видео не начато)
    0 (воспроизведение видео завершено)
    1 (воспроизведение)
    2 (пауза)
    3 (буферизация)
    5 (видео подают реплики).
  */
  switch (event.data) {
    case 1:
      playerContainer.addClass("active");
      playerContainer.addClass("paused");
      break;

    case 2:
      playerContainer.removeClass("active");
      playerContainer.removeClass("paused");
      break;
  }
};

function onYouTubeIframeAPIReady() {
  player = new YT.Player("yt-player", {
    height: "392",
    width: "662",
    videoId: "6eHN3daGoYQ",
    events: {
      onReady: onPlayerReady,
      onStateChange: onPlayerStateChange
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0
    }
  });
}

eventsInit();

const mute = $('.player__mute');
const MAX_VOLUME = 100;
let soundLevel;

$('.player__volume-button').css({
  left: `${MAX_VOLUME}%`
});

$('.player__volume').click((e) => {
  const barVolume = $(e.currentTarget);
  const clickedVolumePosition = e.originalEvent.layerX;
  const newVolumePositionPercent = (clickedVolumePosition / barVolume.width()) * 100;
  const newSoundPosition = player.setVolume(newVolumePositionPercent);

  $('.player__volume-button').css({
    left: `${newVolumePositionPercent}%`
  });

  player.setVolume(newSoundPosition);
});

$(mute).click(e => {

  if (player.isMuted()) {
    $('.player__volume-button').css({
      left: `${soundLevel}%`
    });
    player.unMute();
  } else {
    soundLevel = player.getVolume();
    $('.player__volume-button').css({
      left: `0`
    });
    player.mute();
  }
});
/* })() */;; (function () {
  const findBlockByAlias = (alias) => {
    return $(".reviews__item").filter((idx, item) => {
      return $(item).attr("data-linked") === alias;
    });
  }

  $(".interactive-avatar__link").click(e => {
    e.preventDefault();

    const $this = $(e.currentTarget);
    const parent = $this.closest(".interactive-avatar");
    parent.addClass("active").siblings().removeClass("active");

    const target = $this.attr("data-open");
    const displayedItem = findBlockByAlias(target);
    displayedItem.addClass("active").siblings().removeClass("active");
  })
})()

;; (function () {
  const slider = $(".slider__list").bxSlider({
    pager: false,
    controls: false,
  });

  $('.arrow-right').click(e => {
    e.preventDefault();

    slider.goToNextSlide();
  });

  $('.arrow-left').click(e => {
    e.preventDefault();

    slider.goToPrevSlide();
  });
})();; (function () {
  const openItem = item => {
    const container = item.closest(".person");
    const content = container.find(".person__content");
    const contentBlock = content.find(".person__content-block");
    const contentBlockHeight = contentBlock.height();
    const triangle = container.find(".triangle");

    container.addClass("active");
    triangle.addClass("active");
    content.height(contentBlockHeight);
  }

  const closeAll = container => {
    const items = container.find(".person__content");
    const itemContainer = container.find(".person");
    const triangle = itemContainer.find(".triangle");

    itemContainer.removeClass("active");
    triangle.removeClass("active");
    items.height(0);
  }

  $(".person__name").click(e => {
    const $this = $(e.currentTarget);
    const container = $this.closest(".team");
    const itemContainer = $this.closest(".person");


    if (itemContainer.hasClass("active")) {
      closeAll(container);
    } else {
      closeAll(container);
      openItem($this);
    }
  })
})()
//# sourceMappingURL=data:application/json;charset=utf8;base64,
